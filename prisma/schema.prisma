
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





model User {
  id          String      @id @default(cuid())  
  email       String      @unique
  phone       String      @unique
  role        String[]   @default(["user"])
  posts       Post[]
  comments    Comment[]
  likedPosts   Post[]      @relation("LikedPosts")
  dislikedPosts Post[]    @relation("DislikedPosts")
  referral    String?     
  parentId    String?     
  parent      User?       @relation("UserParent", fields: [parentId], references: [id])
  children    User[]      @relation("UserParent")
  personalInfo PersonalInfo? 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model PersonalInfo {
  id          String   @id @default(cuid())
  uniqueId    Int      @unique 
  address1    String?
  address2    String?
  state       String?
  phoneNumber String?
  country     String?
  firstName   String
  lastName    String?
  pincode     String?
  city        String?
  avatarUrl   String?   
  salutation  String?
  comments    String?  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isApproved   String @default("PENDING")
  user        User      @relation(fields: [userid], references: [id])
  userid      String    @unique
  History     PersonalInfoHistory[]
  Services    Services[]
}


 

model Services{
  id         String   @id @default(cuid())
  nameOfTheService String
  description String
  image    String?
  paymentMode String?
  transactionId String?
  serviceDate DateTime? @db.Date
  posUserId String?
  approvedBy String?
  approvedAt DateTime?
  price       Int
  status      String @default("PENDING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  personalInfo PersonalInfo      @relation(fields: [personalInfoId], references: [id])
  personalInfoId      String
}


model ServiceLimit{
  id         String   @id @default(cuid())
  thirumanjanam   Int @default(3)
  abhisekam      Int @default(3)
  
}


model PersonalInfoHistory{
  id          String   @id @default(cuid())
  uniqueId    Int
  email       String?
  address1    String?
  address2    String?
  state       String?
  phoneNumber String?
  country     String?
  firstName   String
  lastName    String
  pincode     String?
  city        String?
  avatarUrl   String?   
  salutation  String?
  comments    String?  
  createdAt   DateTime  @default(now())
  PeronalInfo PersonalInfo      @relation(fields: [personalInfoId], references: [id])
  personalInfoId      String
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  image       String?
  type        String  @default("public")
  likes       Int
  dislikes    Int
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  likedBy     User[]    @relation("LikedPosts")
  dislikedBy  User[]    @relation("DislikedPosts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

